// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using test_shopping_cart.Data;

#nullable disable

namespace test_shopping_cart.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("test_shopping_cart.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("CostPrice")
                        .HasColumnType("double");

                    b.Property<string>("SkuCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SkuName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProductId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("3c9af691-60eb-4f38-b2c5-d627fc1eaba0"),
                            CostPrice = 4.5,
                            SkuCode = "S-00001",
                            SkuName = "ดินสอ"
                        },
                        new
                        {
                            ProductId = new Guid("ebd02b56-51bf-4b5b-9021-5365b15bd137"),
                            CostPrice = 7.0,
                            SkuCode = "S-00002",
                            SkuName = "ปากกา"
                        },
                        new
                        {
                            ProductId = new Guid("a40a3223-40b1-47eb-a762-fca7a0ec7566"),
                            CostPrice = 3.0,
                            SkuCode = "S-00003",
                            SkuName = "ยางลบ"
                        },
                        new
                        {
                            ProductId = new Guid("f4c3fd26-f750-43f5-86b0-25f38408a9a3"),
                            CostPrice = 6.0,
                            SkuCode = "S-00004",
                            SkuName = "ไม้บรรทัด"
                        },
                        new
                        {
                            ProductId = new Guid("62351332-8db4-4930-b219-a6af900efb7e"),
                            CostPrice = 12.5,
                            SkuCode = "S-00005",
                            SkuName = "น้ํายาลบคําผิด"
                        },
                        new
                        {
                            ProductId = new Guid("7aacf121-55cd-45ea-afa7-b368b42dbddc"),
                            CostPrice = 70.0,
                            SkuCode = "S-00006",
                            SkuName = "กระดาษ a4 80 แกรม(500แผ่น)"
                        },
                        new
                        {
                            ProductId = new Guid("48cd0b38-108f-405f-835a-d0deba24a2c6"),
                            CostPrice = 40.0,
                            SkuCode = "S-00007",
                            SkuName = "แม็กเย็บกระดาษ เบอร์ 35"
                        });
                });

            modelBuilder.Entity("test_shopping_cart.Models.StockInven", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsAction")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("StockInven");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11cb271e-69bf-4653-ab83-42c42bbc84bc"),
                            Amount = 10,
                            CreatedDate = new DateTime(2024, 5, 21, 22, 24, 13, 504, DateTimeKind.Local).AddTicks(9631),
                            IsAction = true,
                            ProductId = new Guid("3c9af691-60eb-4f38-b2c5-d627fc1eaba0"),
                            UnitPrice = 10.0
                        },
                        new
                        {
                            Id = new Guid("2945be21-f977-4a4d-afb1-8854547badd3"),
                            Amount = 5,
                            CreatedDate = new DateTime(2024, 5, 21, 22, 24, 13, 504, DateTimeKind.Local).AddTicks(9646),
                            IsAction = true,
                            ProductId = new Guid("ebd02b56-51bf-4b5b-9021-5365b15bd137"),
                            UnitPrice = 15.0
                        },
                        new
                        {
                            Id = new Guid("98df7a4f-7c1e-41ce-b82c-5af4c6b7b39a"),
                            Amount = 6,
                            CreatedDate = new DateTime(2024, 5, 21, 22, 24, 13, 504, DateTimeKind.Local).AddTicks(9649),
                            IsAction = true,
                            ProductId = new Guid("a40a3223-40b1-47eb-a762-fca7a0ec7566"),
                            UnitPrice = 8.0
                        },
                        new
                        {
                            Id = new Guid("aec23aaf-6a1b-4254-b81e-4f826b1f2baa"),
                            Amount = 10,
                            CreatedDate = new DateTime(2024, 5, 21, 22, 24, 13, 504, DateTimeKind.Local).AddTicks(9652),
                            IsAction = true,
                            ProductId = new Guid("f4c3fd26-f750-43f5-86b0-25f38408a9a3"),
                            UnitPrice = 12.0
                        },
                        new
                        {
                            Id = new Guid("9ab44d23-6e99-4751-8393-c945f59d1f66"),
                            Amount = 20,
                            CreatedDate = new DateTime(2024, 5, 21, 22, 24, 13, 504, DateTimeKind.Local).AddTicks(9656),
                            IsAction = true,
                            ProductId = new Guid("62351332-8db4-4930-b219-a6af900efb7e"),
                            UnitPrice = 25.0
                        },
                        new
                        {
                            Id = new Guid("1dd8677a-8d3f-42b6-926c-91b256cdd81b"),
                            Amount = 11,
                            CreatedDate = new DateTime(2024, 5, 21, 22, 24, 13, 504, DateTimeKind.Local).AddTicks(9659),
                            IsAction = true,
                            ProductId = new Guid("7aacf121-55cd-45ea-afa7-b368b42dbddc"),
                            UnitPrice = 125.0
                        },
                        new
                        {
                            Id = new Guid("36f73ea1-019c-4ca1-862c-1a924d1c7000"),
                            Amount = 9,
                            CreatedDate = new DateTime(2024, 5, 21, 22, 24, 13, 504, DateTimeKind.Local).AddTicks(9661),
                            IsAction = true,
                            ProductId = new Guid("48cd0b38-108f-405f-835a-d0deba24a2c6"),
                            UnitPrice = 89.0
                        });
                });

            modelBuilder.Entity("test_shopping_cart.Models.StockInven", b =>
                {
                    b.HasOne("test_shopping_cart.Models.Product", "Product")
                        .WithOne("StockInven")
                        .HasForeignKey("test_shopping_cart.Models.StockInven", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("test_shopping_cart.Models.Product", b =>
                {
                    b.Navigation("StockInven");
                });
#pragma warning restore 612, 618
        }
    }
}
